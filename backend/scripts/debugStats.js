import mongoose from 'mongoose';
import Task from '../models/Task.js';
import User from '../models/User.js';
import dotenv from 'dotenv';

dotenv.config();

const connectDB = async () => {
  try {
    const conn = await mongoose.connect(
      process.env.MONGODB_URI || 'mongodb://localhost:27017/taskmanager',
      {
        useNewUrlParser: true,
        useUnifiedTopology: true,
      }
    );
    console.log(`‚úÖ MongoDB Connected: ${conn.connection.host}`);
  } catch (error) {
    console.error('‚ùå MongoDB connection error:', error.message);
    process.exit(1);
  }
};

const debugStats = async () => {
  try {
    await connectDB();
    
    console.log('\n=== D√âBOGAGE DES STATISTIQUES ===\n');
    
    // 1. V√©rifier les utilisateurs
    const users = await User.find({});
    console.log(`üìä Utilisateurs dans la base: ${users.length}`);
    users.forEach(user => {
      console.log(`  - ${user.name} (${user.email}) - R√¥le: ${user.role} - ID: ${user._id}`);
    });
    
    // 2. V√©rifier toutes les t√¢ches
    const allTasks = await Task.find({});
    console.log(`\nüìã Total des t√¢ches dans la base: ${allTasks.length}`);
    
    if (allTasks.length === 0) {
      console.log('‚ùå AUCUNE T√ÇCHE TROUV√âE dans la base de donn√©es!');
      return;
    }
    
    // 3. Afficher quelques t√¢ches pour v√©rifier
    console.log('\nüìù Exemples de t√¢ches:');
    allTasks.slice(0, 3).forEach((task, index) => {
      console.log(`  ${index + 1}. "${task.title}" - Statut: ${task.status} - Priorit√©: ${task.priority}`);
      console.log(`     Assign√©e √†: ${task.assignedTo} - Cr√©√©e par: ${task.createdBy}`);
      console.log(`     Date limite: ${task.dueDate} - Cr√©√©e le: ${task.createdAt}`);
      console.log(`     Archiv√©e: ${task.isArchived}`);
    });
    
    // 4. Statistiques globales
    const globalStats = await Task.getStats();
    console.log('\nüìä Statistiques globales (getStats):', globalStats);
    
    // 5. Statistiques par statut
    const statusCounts = await Task.aggregate([
      { $group: { _id: '$status', count: { $sum: 1 } } }
    ]);
    console.log('\nüìä T√¢ches par statut:', statusCounts);
    
    // 6. Statistiques par priorit√©
    const priorityCounts = await Task.aggregate([
      { $group: { _id: '$priority', count: { $sum: 1 } } }
    ]);
    console.log('\nüìä T√¢ches par priorit√©:', priorityCounts);
    
    // 7. T√¢ches archiv√©es vs non archiv√©es
    const archivedCount = await Task.countDocuments({ isArchived: true });
    const nonArchivedCount = await Task.countDocuments({ isArchived: false });
    console.log(`\nüìä T√¢ches archiv√©es: ${archivedCount}`);
    console.log(`üìä T√¢ches non archiv√©es: ${nonArchivedCount}`);
    
    // 8. Test avec un utilisateur sp√©cifique
    if (users.length > 0) {
      const testUser = users[0];
      console.log(`\nüß™ Test avec l'utilisateur: ${testUser.name} (${testUser._id})`);
      
      const userTasks = await Task.find({ assignedTo: testUser._id });
      console.log(`üìã T√¢ches assign√©es √† cet utilisateur: ${userTasks.length}`);
      
      const userStats = await Task.getStats(testUser._id);
      console.log('üìä Stats pour cet utilisateur:', userStats);
    }
    
    // 9. V√©rifier les t√¢ches termin√©es
    const completedTasks = await Task.find({ status: 'completed' });
    console.log(`\n‚úÖ T√¢ches termin√©es: ${completedTasks.length}`);
    
    if (completedTasks.length > 0) {
      console.log('üìù Exemples de t√¢ches termin√©es:');
      completedTasks.slice(0, 3).forEach((task, index) => {
        console.log(`  ${index + 1}. "${task.title}" - Termin√©e le: ${task.completedAt}`);
      });
    }
    
    console.log('\n=== FIN DU D√âBOGAGE ===');
    
  } catch (error) {
    console.error('‚ùå Erreur lors du d√©bogage:', error);
  } finally {
    await mongoose.disconnect();
    console.log('üîå D√©connexion de MongoDB');
  }
};

debugStats(); 